<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="img/favicon.ico">
	<title>S C A L E &nbsp;Course Editor</title>
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<script src="https://apis.google.com/js/api.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<link   rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
	<script src="lib/jquery.ui.touch-punch.min.js"></script>
	<script src="doc.js"></script>
	<script src="rules.js"></script>
	<script src="mediaskin.js"></script>
	<script src="ckeditor/ckeditor.js"></script>
 	<style>
		 body { 			font-family: Verdana,Geneva,sans-serif; font-size:14px; padding:0; margin:0; 
		 					box-sizing: border-box; background-color: #f8f8f8;	
							}
		.wm-main { 			width:100%;  overflow:auto;  display:none; 
							}
		.wm-nav {	 		display:inline-block; overflow:hidden; padding:24px; width:360px; vertical-align:top;
							}
		.wm-confirm {		position: absolute;  width: 350px; padding: 16px; left: calc(50% - 150px); top: calc(50% - 50px); user-select: none;	
							border-radius: 8px; background-color: #fff; border: 1px solid #999; box-shadow: 4px 2px 12px 2px #aaa; 
							}
		.wm-content {		display:inline-block; margin-right:12px; width:calc(100% - 440px); max-width:900px
							}
		.wm-splash { 		width:100%; color:#999; text-align:center; margin-top:10%; display:none;
							}
		.wm-header { 		background-color: #bbb; width:100%; color:#fff;	padding: 8px 0px;
							}
		.wm-logo { 			height:30px; vertical-align: top; margin:0px 16px; cursor:pointer;
							}
		.wm-courseTitle { 	font-size: 24px; font-weight: bold; margin-right:32px; cursor:pointer;
							}
		.wm-pageTitle {		color:#333;	font-size: 24px; text-align:center; font-weight: bold; padding-top:16px; padding-bottom:8px;
							}
		.wm-stepEditor {	width:525px; overflow-x:hidden; margin:24px; background-color: #fff; border: 1px solid #999;
							padding:32px; border-radius: 16px; max-height:75vh;
							}
		.wm-macroEditor {	position:absolute;;width:525px; overflow-x:hidden; background-color: #f8f8f8; border: 1px solid #999;
							padding:16px; border-radius: 16px; max-height:75vh; margin-top:60px; margin-left: 24px;
							}
		.wm-popup {			position: absolute;  width: auto; padding: 12px; left: calc(50% - 100px); top: calc(50% - 50px);
							border-radius: 8px; background-color: #fff; border: 1px solid #009900; box-shadow: 4px 2px 12px 2px #aaa; 
							text-align:center; display: none;
							}
		.wm-is {			border-radius:10px; padding-left:8px; padding-right:8px; padding-top:1px;
							border:1px solid #999; font-size:12px; height:20px; width:300px;
							}
		.wm-is2 {			border-radius:10px; padding-left:8px; padding-right:8px; padding-top:1px;
							border:1px solid #999; font-size:12px; height:18px; width:120px;
							}
		.wm-bs {			border-radius: 16px; padding-left: 8px; padding-right: 8px; display: inline-block; height: 17px; padding-top: 1px;
							font-size: 12px; background-color: #27ae5f; cursor: pointer; text-align: center; color:#fff; user-select: none;
							}
		.wm-tree {      	user-select: none; width: 100%; margin-left:40px;
							padding: 0px 0; font-size: 14px; text-align: left; 
							}

		.wm-tree ul { 		list-style: none outside none; padding: 0 }
		.wm-tree li a { 	line-height: 20px; cursor: pointer; }
		.wm-tree > ul > li > a { color:#000; display: block;  font-weight: normal; position: relative; text-decoration: none; }
		.wm-tree li.parent > a { padding: 0 0 0 16px;  }
		.wm-tree li.parent > a:before { background-image: url("img/treebuts.gif"); content: ""; display: block;
										height: 11px; left: 0; position: absolute; top: 4px; width: 11px;  background-position: 0px;
										}
		.wm-tree ul li.active > a:before { background-position: 22px; }
		.wm-tree ul li ul 	{ border-left: 1px solid #ccc;  display: none; margin: 0 0 0 5px; padding: 0 0 0 10px; }
		.wm-tree ul li ul li { position: relative; }

	</style>

</head>
<body>

	<div id='mainDiv' class='wm-main'>
		<div id='headerDiv' class='wm-header'>
			<img src='img/scaleLogoWhite.png' alt="" class='wm-logo'>
				<span id='courseTitle' class='wm-courseTitle'>Course</span>
				<span id='menuMsg' style='display:none;margin-left:32px'></span>
				<div id='showgdoc' title='Load new course' style='float:right;margin-right:16px;cursor:pointer;margin-top:6px'>
				</div>
			</div>
		<div id='navDiv' class='wm-nav'></div>
		<div class='wm-content'>
			<div id='contentDiv'></div>
			<div id='editorDiv' style='max-width:900px'>
				<textarea class='ckeditor' id='editor1' name='editor1'></textarea>
				<br>
				<div style='float:right'>
					<select id="addMacroBut" class='wm-is' style="width:auto">
						<option>Macro</option>
						<option>Video</option>
						<option>Media</option>
						<option>Assessment</option>
						<option>Widget</option>
						<option>AMS</option>
						<option>Button</option>
						<option>Link</option>
					</select>&nbsp;&nbsp;
					id: <input class='wm-is' type='text' style='width:60px;height:15px;text-align:center' id='paneId'>
				</div>
				<div style=''>
					<div id='savePaneBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;
					<img id='removePaneBut' alt="" style='vertical-align:-5px' src='img/trashbut.gif'>	
				</div>
			</div>
		</div>
	</div>
	<div id='splashDiv' class='wm-splash'>
		<img src='img/scaleLogo.png' alt=""><br><br>
		<h1 style='font-size:18pt;font-family:trebuchet ms,sans-serif'>S C A L E Editor<br><br>Student-Centered Adaptive Learning Environment</h1>
		<p style='font-weight:bold;font-size:48px'><b>Course editor</b></p>
	</div>
		
<script>

if ((location.protocol != 'https:') && (window.location.host != "localhost")) location.href = 'https:' + window.location.href.substring(window.location.protocol.length); // FORCE HTTPS!

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// APP
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	let startingLob="";

class App  {																

	constructor(id)   															// CONSTRUCTOR
	{
		app=this;
		this.con=new Content();														// Alloc content
		this.tree=null;																// Holds lobs tree
		this.previewWin=false;														// If preview window is open or closed
		this.undos=[];																// Holds undos
		this.curUndo=0;																// Undo counter
		this.InitCourse(id)															// Init course
		this.setDone=true;															// Controls if we set status just by viewing pane
		this.toneJS=false;															// Enable toneJS
		this.skipDone=false;														// Controls if panes are skipped if status == 10
		this.hideHeader=false;														// Controls header is hidden
		this.assessLevel=.5;														// Level to pass assessment
		this.reportLevel=0;															// Report only final grade of assessment
		this.reportLink="";															// Link to form
		this.login=false;															// No need to login
		this.discussion="";															// No discussion
		this.defMargin=0;															// Default margin
	}

	InitCourse(id)
	{
		this.doc=new Doc(id);														// Alloc doc w/ course id
		this.rul=new Rules();														// Rules
		this.ams=new MediaSkin();													// Action skins
		this.editorChange=0;														// Tracks edits
		this.setDone=true; this.skipDone=false; this.assessLevel=.5;				// Defaults
		this.Draw(); 																// Draw app
	}

	Draw() 																		// REDRAW
	{
		this.doc.Draw();															// Reset various params
		this.con.Draw();															// Reset various params
		DrawNav();																	// Draw navigation
	}

	Do()																		// DO
	{
		this.undos[this.curUndo]=app.doc.MakeTabFile();								// Save undo
		this.curUndo++;																// Inc undo count
	}
	
	UnDo()																		// UNDO
	{
		if (this.curUndo < 1)														// Nothing to undo
			return;																	// Quit
		app.doc.InitFromTSV(this.undos[this.curUndo-1]);							// Init show from undo
		app.Draw();																	// Redraw
		this.curUndo--;																// Dec undo count
		Sound("ding");																// Ding
	}

}																					// CLASS CLOSURE

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INIT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	var app=null;																	// Hold course data 
	var currentTime=0;																// Current time for triggers

	$(document).ready(function() {													// WHEN PAGE LOADED
		if (window.addEventListener) 												// If supported this way
			window.addEventListener("message",eventHandler,false);					// Add event handler
		else																		// Use other method
			window.attachEvent("message",eventHandler);								// Add handler

	var h=$(window).height()-300;													// Editor height
	$("#mainDiv").fadeIn(0),h+=44;													// Load fast (account for CK sizing bug)
	
	var url=window.location.search.substring(1);						   			// Get query string
	if (!url)																		// No lobs id set
		url="1LSnAM3A62AQipZfqxDtlOjt4MWJ0fBP22cdyqJqEj5M";							// Use this one
	app=new App(url);																// Alloc doc w/ course id
	$("#showgdoc").text("Id: "+app.doc.courseId.substr(-8));						// Show id snippet
	CKEDITOR.on('instanceLoaded', function(e) { e.editor.resize("100%", h)});		// Resize editor
	CKEDITOR.instances.editor1.on('change', function(e) { app.editorChange++});		// We've changed something

	$("#showgdoc").on("click",function() {											// Show google doc
		GetSpreadsheet(true, function(id) {											// Get new spreadsheet
			app.doc.courseId=id;													// Get id
			$("#showgdoc").text("Id: "+id.substr(-8));								// Show id snippet
			app.InitCourse(id);														// Init	
			});		
		});
	
	$(window).on("keydown",function(e) {											// HANDLE KEYPRESS
		if ((e.which == 84) && e.altKey && e.ctrlKey) {								// Test key (Ctrl+Alt+T)
			}
		else if ((e.which == 71) && e.altKey) {										// Show spreadsheet (Alt+G)
			window.open("https://docs.google.com/spreadsheets/d/"+app.doc.courseId,"_blank");	// Show it	
			}
		});

	});

	function eventHandler(e)													// ON HTML5 EVENT
	{
		if (e.data && e.data.match(/ScaleVideo=time/)) {							// Trigger time
			currentTime=e.data.substr(16);											// Extract time as timecode
			$("#addTriggerBut").trigger("click");									// Add it
			}			
		if (e.data && e.data.match(/INS:/))	{										// Insert macro
			CKEDITOR.instances.editor1.insertText(e.data.substring(4));				// Insert text	
			Sound("ding");															// Ding	
			}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAVIGATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function DrawNav()															// DRAW COURSE NAVIGATION
	{
		var i,o;
		$("#courseTitle").html(app.doc.lobs[0].name);								// Show course name
		var str="<b>Learning panes:</b><i> (Click to edit)</i><br>";				// Tree label
		str+="<div id='treeDiv' class='wm-tree'></div>";							// Add div to hold tree
		str+="<div id='addPaneBut' class='wm-bs'>Add new pane</div>&nbsp;&nbsp;";	// Add button
		str+="<br><br><hr><br><table class='wm-navTable'>";							// Line and table
		str+="<tr><td><b>Questions&nbsp;</b></td><td>"+MakeSelect("asksBut",false,["Choose"])+"</td><td>&nbsp;<div id='addAskBut' class='wm-bs'>Add</div></td>";
		str+="<tr><td><b>Rules&nbsp;</b></td><td>"+MakeSelect("rulesBut",false,["Choose"])+"</td><td>&nbsp;<div id='addRuleBut'  class='wm-bs'>Add</div></td>";
		str+="<tr><td><b>AMS&nbsp;</b></td><td>"+MakeSelect("amsBut",false,["Choose"])+"</td><td>&nbsp;<div id='addAMSBut' class='wm-bs'>Add</div></td>";
		str+="</table>";
		str+="<br><hr><br><div id='saveCourseBut' class='wm-bs'>Save course</div>&nbsp;&nbsp;&nbsp;";
		str+="<div id='previewBut' class='wm-bs'>Preview course</div>&nbsp;&nbsp;&nbsp;";
		str+="<div id='undoBut' class='wm-bs'>Undo</div>&nbsp;&nbsp;&nbsp;";
		str+="<div id='settingsBut' class='wm-bs'>Settings</div>";
		str+="<br><textarea id='outputDiv' style='width:1px;height:1px;opacity:.01'></textarea>";
		str+="<br>Help <img src='img/helpicon.gif' style='vertical-align:-4px;cursor:pointer' id='showHelp'>"; 
//		str+="<a style='margin-left:24px;color:#999' href='https://viseyes.org/privacy.htm' target='_blank'>Privacy policy</a>";

		$("#navDiv").html(str);														// Draw nav part
		app.tree=new Tree();														// Show lobs tree				
		app.doc.SetCurVars(2);														// Set current areas																								
		for (i=0;i<app.rul.rules.length;++i) {										// For each rule
			o=app.rul.rules[i];														// Point at rule
			$("#rulesBut").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>");	// Add to pulldown
			}
		for (i=0;i<app.doc.asks.length;++i) {										// For each ask
			o=app.doc.asks[i];														// Point at ask
			$("#asksBut").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>");	// Add to pulldown
			}
		for (i=0;i<app.ams.skins.length;++i) {										// For each ams
			o=app.ams.skins[i];														// Point at ams
			$("#amsBut").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>");	// Add to pulldown
			}

		$("#showHelp").on("click",function() { 										// ON HELP
			window.open("https://docs.google.com/document/d/1QC4T1dE7xtjCM9C43AyUNiSPl-gKxjj4xziqm4JLd4I/edit?usp=sharing","_blank");
			});
		
		$("#undoBut").on("click", ()=> {  											// ON UNDO
			app.UnDo();																// Undo action
			});

		$("#settingsBut").on("click", ()=> {  										// ON SETTINGS
			app.con.Draw("setting");												// Run settings
			});

		$("#saveCourseBut").on("click", ()=> {  									// ON SAVE COURSE
			var i,d=[];
			var v=app.doc.MakeTabFile().split("\n");								// Split into rows
			for (var i=0;i<v.length;++i)											// For each row
				d.push(v[i].split("\t"));											// Add array of fields
			SaveSpreadsheet(app.doc.courseId,d);			// Save to GDrive
		});

		$("#previewBut").on("click", ()=> {  										// ON PREVIEW COURSE
			str=app.doc.MakeTabFile();												// Create TSV file
			$("#outputDiv").val(str);												// Show it
			$("#outputDiv")[0].select();											// Select div
			if (app.previewWin && app.previewWin.closed)							// No longer open
				app.previewWin=false;												// Force a reopen
			if (!app.previewWin) {													// No window open
				app.previewWin=window.open("index.html?preview","scalePreview");	// Open preview tab
				setTimeout(function() {												// Open timer
					if (app.previewWin) {											// If preview window has opened
						setTimeout(function() {										// Open timer
							app.previewWin.postMessage("ScalePreview|"+str,"*");	// Send message	
							$(this).remove();										// Kill timer	
							},1000);				
						$(this).remove();											// Kill timer	
						}
					},1000);														// 1 sec interval
				}	
			app.previewWin.postMessage("ScalePreview|"+str,"*");					// Send message						
			app.previewWin.focus();													// Show it
			Sound("ding"); 															// Ding
			});

		$("#asksBut").on("change", function() {  									// ON EDIT ASK
			app.con.Draw("ask",$(this)[0].selectedIndex-1);							// Show pane
			Sound("click"); 														// Click
			});

		$("#addPaneBut").on("click", ()=> {  										// ON ADD NEW PANE
			app.doc.AddNewLob(app.tree.curPaneId); 									// Add lob
			var id=app.doc.lobs[app.doc.lobs.length-1].id;							// New id
			app.tree.Init(id);														// Remake tree
			app.con.Draw("pane",id);												// Edit new pane
			Sound("ding"); 															// Ding
			});

		$("#addAMSBut").on("click", ()=> {  										// ON ADD NEW AMS
			var o={id:"000", name:"Change this!", body:"", items:[] };				// Blank skin
			app.ams.skins.push(o);													// Add to asks
			$("#amsBut").append("<option>000 - Change this!</option>");				// Add option
			$("#amsBut")[0].selectedIndex=app.ams.skins.length;						// Select it
			app.con.Draw("ams",app.ams.skins.length-1);								// Show editor																							
			Sound("ding");															// Ding sound
			});
	
		$("#amsBut").on("change", function() {  									// ON EDIT AMS
			app.con.Draw("ams",$(this)[0].selectedIndex-1);							// Show pane
			Sound("click"); 														// Click
			});
		
		$("#addAskBut").on("click", ()=> { 											// ON ADD QUESTION
			var o={id:"000", name:"Change this!", step:"{\"optionType\":\"radio\",\"options\":[]}"};	// Step
			app.doc.asks.push(o);													// Add to asks
			$("#asksBut").append("<option>000 - Change this!</option>");			// Add option
			$("#asksBut")[0].selectedIndex=app.doc.asks.length;						// Select it
			app.con.Draw("ask",app.doc.asks.length-1);								// Show editor																							
			Sound("ding");															// Ding sound
			});

		$("#rulesBut").on("change", function() {  									// ON EDIT ASK
			app.con.Draw("rule",$(this)[0].selectedIndex-1);						// Show pane
			Sound("click"); 														// Click
			});
		
		$("#addRuleBut").on("click", ()=> { 										// ON ADD RULE
			var o={id:"000", name:"Change this!", verb:"=", do:"show", subject:"", object:""};	// Blank rule
			$("#rulesBut").append("<option>000 - Change this!</option>");			// Add option
			app.rul.rules.push(o);													// Add to rules
			$("#rulesBut")[0].selectedIndex=app.rul.rules.length;					// Select it
			app.con.Draw("rule",app.rul.rules.length-1);							// Show editor																							
			Sound("ding");															// Ding sound
			});

		$("#addMacroBut").on("change", function() {  								// ON ADD MACRO
			app.con.MacroEditor($(this).val());										// Add/edit macro
			});
	}	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONTENT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	class Content {

		constructor()  																	// CONSTRUCTOR
		{
			this.curEditId=0;																// Id of current pane
			this.Draw("splash");															// Draw content

			$("#savePaneBut").on("click", ()=> {											// ON SAVE CHANGES
				app.editorChange=0;															// Changes saved
				app.Do();																	// Save for undo
				var o=app.doc.lobs[this.curEditId];											// Point at lob
				o.body=CKEDITOR.instances.editor1.getData();								// Get body
				o.name=$("#pageTitle").text();												// Get name
				var id=$("#paneId").val();													// Get current id value
				id=(""+id).replace(/\./g,"-");												// Turn dots to dashes
				if (id != o.id) {															// Reset
					app.doc.RenameLobId(o.id,id);											// Rename lob id
					app.tree.Init(id);														// Remake tree
					}
				else																		// Same id
					$("#tr-"+o.id).text(o.name)                             				// Reset tree name
				this.Draw("splash");														// Draw splash
				Sound("ding");																// Ding
				});

			$("#removePaneBut").on("click", ()=> {  										// ON REMOVE PANE
				ConfirmBox("Are you sure?", "This will remove any underlying panes!",()=> { // If sure
					app.Do();																// Save for undo
					app.doc.UnlinkLob(app.tree.curPaneId) 									// Remove it
					app.tree.Init();														// Remake tree
					this.Draw("splash");													// Draw splash
					Sound("delete");														// Delete sound
					});
			});

		}

		Draw(type, id)																	// DRAW
		{
			var o;
			var str="";
			if (app.editorChange > 1) {														// If changes still active
				ConfirmBox("You have unsaved changes!","To save them, click on <span style='color:#27ae5f'><b>OK</b></span> or <b>Cancel</b> to abandon them.",	// Sure?
						()=>{ $("#savePaneBut").trigger("click"); },						// Save changes
						()=>{ app.editorChange=0;	this.Draw(type,id); ;						// Forget changes
						});
				return;																		// Quit (let confirm retry if OK)
				}	
				$("#editorDiv").hide();														// Hide editor
			if (type == "splash") {															// Draw splash
				str+="<div style='text-align:center;color:#000'><br><br><br><br><br>";
				str+="<img src='img/scaleLogo.png'><br>";
				str+="<h1 style='font-size:24pt;font-family:trebuchet ms,sans-serif'><p></p>S C A L E</h1>";
				$("#contentDiv").html(str);													// Add splash
				}
			else if (type == "pane") {														// Draw pane
				id=app.doc.FindLobIndexById(id);											// Get index from id
				o=app.doc.lobs[id];															// Point at lob
				if (!o) { 																	// Invalid pane
					this.Draw("splash");													// Show splash																								
					return;																	// Quit
					}
				str+=o.name ? "<div id='pageTitle' class='wm-pageTitle' contentEditable='true'>"+o.name+"</div>" : "";			// Get page title
				$("#contentDiv").html(str);													// Add page title
				CKEDITOR.instances.editor1.setData(o.body);									// Add body data
				app.editorChange=0;															// Reset change flag
				this.curEditId=id;															// Save id
				$("#paneId").val(o.id);														// Show  id
				$("#editorDiv").show();														// Show editor
				}
			else if (type == "ask") {														// Draw question
				o=app.doc.asks[id];															// Point at ask
				if (!o) { 																	// Invalid pane
					this.Draw("splash");													// Show splash																								
					return;																	// Quit
					}
				this.curEditId=id;															// Save id
				this.QuestionEditor(o);														// Run editor
				}
			else if (type == "rule") {														// Draw rule
				o=app.rul.rules[id];														// Point at rule
				if (!o) { 																	// Invalid pane
					this.Draw("splash");													// Show splash																								
					return;																	// Quit
					}
				this.curEditId=id;															// Save id
				this.RuleEditor(o);															// Run editor
				}
			else if (type == "ams") {														// Draw AMS
				o=app.ams.skins[id];														// Point at skin
				if (!o) { 																	// Invalid pane
					this.Draw("splash");													// Show splash																								
					return;																	// Quit
					}
				this.curEditId=id;															// Save id
				this.AMSEditor(o);															// Run editor
				}
			else if (type == "setting") 													// Draw settings
				this.SettingsEditor();														// Run editor
		}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MACRO EDITOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	MacroEditor(which)																	// MACRO EDITOR
	{
		var tag,i,o,v,t;
		var items=[],params=[];
		var body=CKEDITOR.instances.editor1.getData();										// Get body data
		$("#macroEditorDiv").remove();														// Remove any existing ones
		$("#playEditorDiv").remove();														
//		$("#addMacroBut")[0].selectedIndex=0;												// Clear selection
		var str="<div id='macroEditorDiv' class='wm-macroEditor'>";
		str+="<img src='img/scaleLogo.png' style='vertical-align:-12px;margin-right:16px' width='32'><span style='font-size:16px'><b>"+which+" Editor</b></span><br><p><hr></p>";	
		if (which == "Assessment") {														// Add/edit assessment
			if (tag=body.match(/assess\((.*?)\)/i)) 										// If an assess() tag
				items=tag[1].split("|");													// Get items
			str+="<ol id='macroItemsList' style='max-height:300px;overflow-x:hidden'></ol><hr>";	// Add list container
			str+=MakeSelect("addNewAskBut",false,["Choose new question to add"]);			// Add select
			str+="<span style='float:right'><i>Drag here to remove</i> &nbsp;";				// Directions
			str+="<img title='Delete this item' style='vertical-align:-5px' src='img/trashbut.gif'></span>";	// Trash button
			str+="<hr><br><div id='saveMacroBut' class='wm-bs'>Save changes</div>";			// Save button				
			$("#contentDiv").append(str+"</div>");											// Add to content div
			for (i=0;i<app.doc.asks.length;++i) {											// For each ask
				o=app.doc.asks[i];															// Point at ask
				$("#addNewAskBut").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>");	// Add to pulldown
				}
			Populate();																		// Add current items

			$("#addNewAskBut").on("change", function() {									// ON ADD NEW ITEM
				var id=$(this).val().split(" - ")[0];										// Get id
				items.push(id);																// Add to list
				$("#addNewAskBut")[0].selectedIndex=0;										// Clear selection
				Sound("ding");																// Ding sound
				Populate();																	// Reshow items
				});

			$("#macroItemsList").sortable({ stop: function(e, ui) {							// Can be sorted
					if (ui.position.left > 400) {											// In delete area
						items.splice(ui.item[0].id.substr(5),1);							// Remove item
						Sound("delete");													// Delete sound
						Populate();															// Reshow items
						}
					}
				});											
			} 																				// ASSIGNMENT CLOSURE
		else if (which == "AMS") {															// Add/edit AMS
			str+=MakeSelect("param-0",false,["Choose AMS to add"]);							// Add select
			str+="<br><br><div id='saveMacroBut' class='wm-bs'>Save changes</div>";			// Save button				
			$("#contentDiv").append(str+"</div>");											// Add to content div
			for (i=0;i<app.ams.skins.length;++i) {											// For each AMS skin
				o=app.ams.skins[i];															// Point at skin
				$("#param-0").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>"); // Add to pulldown
				}
			}
		else if (which == "Media") {														// Add/edit media
			if (tag=body.match(/scalemedia\((.*?)\)/i)) 									// If a scalemedia() tag
				params=tag[1].split(",");													// Get frame items
			str+="<table><tr><td>URL</td><td><input class='wm-is' style='width:350px;height:16px' type='text' id='param-0' value='"+(params[0] ? params[0] :'')+"'></td></tr>";	
			str+="<tr><td>Width&nbsp;%&nbsp;</td><td><input class='wm-is' style='width:50px;height:16px' type='text' id='param-2' value='"+(params[2] ? params[2] :'')+"'>";
			str+="&nbsp;&nbsp;Height % <input class='wm-is' style='width:50px;height:16px' type='text' id='param-1' value='"+(params[1] ? params[1] :'')+"'>";
			str+="&nbsp;&nbsp;Border? <input type='checkbox' "+(params[3] ? "checked" : "")+" id='param-3'></td></tr>";
			str+="</table><br><div id='saveMacroBut' class='wm-bs'>Save changes</div>";		// Save button				
			$("#contentDiv").append(str+"</div>");											// Add to content div
			} 																				
		else if (which == "Widget") {														// Add/edit widget
			if (tag=body.match(/scalewidget\((.*?)\)/i)) 									// If a scalewidget() tag
				params=tag[1].split(",");													// Get frame items
			str+="<table><tr><td>URL</td><td><input class='wm-is' style='width:350px;height:16px' type='text' id='param-0' value='"+(params[0] ? params[0] :'')+"'></td></tr>";	
			str+="<tr><td>Width % (1-100) </td><td><input class='wm-is' style='width:50px;height:16px' type='text' id='param-1' value='"+(params[1] ? params[1] :'')+"'></td></tr>";
			str+="<tr><td>Top margin </td><td><input class='wm-is' style='width:50px;height:16px' type='text' id='param-2' value='"+(params[2] ? params[2] :'')+"'></td></tr>";
			str+="</table><br><div id='saveMacroBut' class='wm-bs'>Save changes</div>";		// Save button				
			$("#contentDiv").append(str+"</div>");											// Add to content div
			} 																				
		else if ((which == "Button") || (which == "Link")) {								// Add/edit button/link
			str+="<table><tr><td>Action</td><td>"+MakeSelect("param-1",false,["","SHOW","GOTO","VAR","SEND","STATUS","REPORT"],params[1])+"</td></tr>";
			str+="<tr><td>Label </td><td><input class='wm-is' style='width:50px;height:16px' type='text' id='param-0' value='"+(params[0] ? params[1] :'')+"'></td></tr>";
			str+="<tr><td>Content </td><td><input class='wm-is' style='width:50px;height:16px' type='text' id='param-2' value='"+(params[2] ? params[2] :'')+"'></td></tr>";
			str+="</table><br><div id='saveMacroBut' class='wm-bs'>Save changes</div>";		// Save button				
			$("#contentDiv").append(str+"</div>");											// Add to content div
			} 																				
		else if (which == "Video") {														// Add/edit video
			var curTriggerItem="";
			params[0]="";
			if (tag=body.match(/scalevideo\((.*?)\)/i)) 									// If a scalevideo() tag
				params=tag[1].split(",");													// Get frame items
			params[0]+="|";																	// To help matching
			t=params[0].match(/src=(.*?)\|+/i);												// Get src
			str+="<table><tr><td>Video Id</td><td><input class='wm-is' style='width:350px;height:16px' type='text' id='param-0' value='"+(t ? t[1] :'')+"'></td></tr>";	
			str+="<tr><td>Width&nbsp;%&nbsp;</td><td><input class='wm-is' style='width:50px;height:16px' type='text' id='param-2' value='"+(params[2] ? params[2] :'')+"'>";
			str+="&nbsp;&nbsp;&nbsp;Height % <input class='wm-is' style='width:50px;height:16px' type='text' id='param-1' value='"+(params[1] ? params[1] :'')+"'>";
			str+="&nbsp;&nbsp&nbsp;Border? <input type='checkbox' "+(params[3] ? "checked" : "")+" id='param-3'></td></tr>";
			t=params[0].match(/start=(.+?)\|/i);											// Get start
			str+="<tr><td>Start&nbsp;time</td><td><input class='wm-is' style='width:50px;height:16px' type='text' id='pStart' value='"+(t ? SecondsToTimecode(t[1]) :'')+"'>";	
			t=params[0].match(/end=(.+?)\|/i);												// End
			str+="&nbsp;&nbsp;&nbsp;End&nbsp;time&nbsp;&nbsp;<input class='wm-is' style='width:50px;height:16px' type='text' id='pEnd' value='"+(t ? SecondsToTimecode(t[1]) :'')+"'>";
			t=params[0].match(/auto=(.+?)\|/i);												// Auto
			str+="&nbsp;&nbsp;&nbsp;Autoplay? <input type='checkbox' "+(t && (t[1] == "true") ? "checked" : "")+" id='pAuto'></td></tr>";
			t=params[0].match(/slides=(.+?)\|/i);											// Slides
			str+="<tr><td>Slides&nbsp;link</td><td><input class='wm-is' style='width:204px;height:16px' type='text' id='pSlides' value='"+(t ? t[1] :'')+"'>";	
			t=params[0].match(/split=(.+?)\|/i);											// Split
			str+="&nbsp;&nbsp;&nbsp;Split %&nbsp;&nbsp;<input class='wm-is' style='width:30px;height:16px' type='text' id='pSplit' value='"+(t ? t[1] :'')+"'></td></tr>";	
			t=params[0].match(/notes=(.+?)\|/i);											// Notes
			str+="<tr><td>Allow notes?</td><td><input type='checkbox' "+(t && (t[1] == "true") ? "checked" : "")+" id='pNotes'>";
			t=params[0].match(/trans=(.+?)\|/i);											// Split
			str+="&nbsp;&nbsp;&nbsp;Transcript Id&nbsp;&nbsp;<input class='wm-is' style='width:30px;height:16px' type='text' id='pTrans' value='"+(t ? t[1] :'')+"'>";	
			t=params[0].match(/toc=(.+?)\|/i);											// Split
			str+="&nbsp;&nbsp;&nbsp;Contents Id&nbsp;&nbsp;<input class='wm-is' style='width:30px;height:16px' type='text' id='pTOC' value='"+(t ? t[1] :'')+"'></td></tr>";	
			t=params[0].match(/next=(.+?)\|/i);												// Next
			str+="<tr><td>Next&nbsp;when&nbsp;done?</td><td><input type='checkbox' "+(t && (t[1] == "true") ? "checked" : "")+" id='pNext'></td></tr>";
			str+="<tr><td colspan='2'><hr></td></tr>";										// Rule
			str+="<tr><td>Triggers:</td><td><span style='float:right'><div id='addTriggerBut' class='wm-bs'>Add trigger</div>";	// Add but
			str+="&nbsp;&nbsp;<img id='deleteTrigger' title='Delete trigger' style='vertical-align:-5px;cursor:pointer' src='img/trashbut.gif'>";
			str+="&nbsp;&nbsp;<img id='showPlayerBut' title='Show player' style='vertical-align:-5px;cursor:pointer' src='img/playbut.gif'></span>";
			str+="<ul style='list-style-type:none;padding:0;margin:0;margin-left:4px;max-height:180px;overflow-x:hidden' id='macroItemsList'></ul></td></tr>";
			str+="</table><hr><br><div id='saveMacroBut' class='wm-bs'>Save changes</div>";		// Save button				
			$("#contentDiv").append(str+"</div>");											// Add to content div
			t=params[0].match(/trigger=(.+?)\|/i);											// Trigger
			if (t)	PopulateTriggers(t[1]);													// Show triggers

			$("[id^=item-]").on("click", (e)=> {											// On TRIGGER CLICK
				curTriggerItem=e.currentTarget.id;											// Get id
				});

			$("#showPlayerBut").on("click", (e)=> {											// ON PLAYER CLICK
				$("#playEditorDiv").remove();												// Kill old one
				var h=$("#macroEditorDiv").width()*.6;										// Set height based on aspect												
				var str="<div id='playEditorDiv' class='wm-macroEditor' style='text-align:center'>";	// Div
				var src="video.htm?src="+$("#param-0").val();								// Add src
				src+=$("#pStart").val() ? ("|start="+TimecodeToSeconds($("#pStart").val())) : "";	// Add start
				str+="<img id='vpcb' style='float:right;cursor:pointer;margin-bottom:4px' src='img/closedot.gif'>";
				str+="<iframe id='contentIF' class='wm-media' align='middle' src='"+src+"' frameborder='0' style='height:"+h+"px;width:100%'></iframe>";	// Load in iframe
				str+="<div id='playerTriggerBut' class='wm-bs'>Add trigger</div>";			// Add button
				$("#contentDiv").append(str+"</div>");										// Add to content div
				$("#playEditorDiv").draggable();											// Draggable
				$("#playEditorDiv").css({top:"40px",left:"0px"});							// Position
				$("#vpcb").click(function() { $("#playEditorDiv").remove(); });				// Remove on click of close button

				$("#playerTriggerBut").on("click", (e)=> {									// ON PLAYER ADD TRIGGER
					SendToIframe("ScaleAct=time");											// Ask for time
					});
				});

			$("#deleteTrigger").on("click", (e)=> {											// ON DELETE
					if (curTriggerItem) {													// If something to trigger
					$("#"+curTriggerItem).remove();											// Remove it
					Sound("delete");														// Delete sound
					curTriggerItem="";														// Reset trigger
					}				
				});

			$("#addTriggerBut").on("click", function() {									// ON ADD TRIGGER
				var id=$("#macroItemsList li").length;										// Id
				var s="<li id='item-"+id;													// Header
				s+="'><span contenteditable='true'>"+SecondsToTimecode(currentTime);		// Add time					
				s+="</span>&nbsp; &rarr; &nbsp;<span contenteditable='true'>????<span></li>";	// Add id
				$("#macroItemsList").append(s); 											// Add to list
				$("#item-"+id).on("click", (e)=> { curTriggerItem=e.currentTarget.id; });	// ON TRIGGER CLICK
				});

			function PopulateTriggers(t)	{												// POPULATE TRIGGERS
				var i,s;
				t=t.split("+");																// As array
				$("#macroItemsList").empty();												// Clear list
				for (i=0;i<t.length;++i) {  												// For each item
					s="<li id='item-"+i+"'><span contenteditable='true'>";					// Header
					s+=SecondsToTimecode(t[i].split('-')[0]);								// Add time
					s+="</span>&nbsp; &rarr; &nbsp;<span contenteditable='true'>"+t[i].split('-')[1]+"<span></li>";	// Add id
					$("#macroItemsList").append(s); 										// Add to list
					}
				}	
			}																				// VIDEO CLOSURE

		$("#saveMacroBut").on("click", function() {											// ON SAVE CHANGES
			o=app.doc.lobs[app.con.curEditId];												// Point at lob
			$("#addMacroBut")[0].selectedIndex=0;											// Clear selection
			if (which == "Assessment") {													// Add/edit assessment
				str="Assess(";																// Add head
				$("#macroItemsList li").each(function() {									// For each list item
					str+=$(this).text().split(" - ")[0]+"|";								// Add to list
					});				
				str=str.substr(0,str.length-1)+")";											// Close		
				if (tag)	body=body.replace(/assess\(.*?\)/i,str);						// Get tag and replace it with new macro
				else		body+=str;														// Simply append
				}
			else if ((which == "Media") || (which == "Video") || (which == "Widget") || (which == "Button") || (which == "Link") || (which == "AMS")) {		// Add/edit
				str="scale"+which+"(";														// Add head
				if (which == "Media") 														// If media
					str+=$("#param-0").val() ? $("#param-0").val() : "";					// Add url
				else if (which == "widget") {												// If widget
					str+=$("#param-0").val() ? $("#param-0").val() : "";					// Add url
					str+=$("#param-1").val() ? $("#param-1").val() : "";					// Add top
					}
				else if (which == "AMS") 													// If AMS
					str+=$("#param-0").val() ? $("#param-0").val() : "";					// Add url
				else if ((which == "Button") || (which == "Link")) 							// If button or link
					str+=$("#param-0").val() ? $("#param-0").val() : "";					// Add label
				else{																		// Video
					str+="src="+$("#param-0").val();										// Add src
					str+=$("#pStart").val() ? ("|start="+TimecodeToSeconds($("#pStart").val())) : ""	// Add start
					str+=$("#pEnd").val() ? ("|end="+TimecodeToSeconds($("#pEnd").val())) : ""			// Add end
					str+=$("#pAuto").prop("checked") ? "|auto=true" : "";					// Add border
					str+=$("#pSlides").val() ? ("|slides="+$("#pSlides").val()) : ""		// Add slides
					str+=$("#pSplit").val() ? ("|split="+$("#pSplit").val()) : ""			// Add split
					str+=$("#pNext").prop("checked") ? "|next=true" : "";					// Add next
					str+=$("#pNotes").prop("checked") ? "|notes=true" : "";					// Add notes
					str+=$("#pTrans").val() ? ("|trans="+$("#pTrans").val()) : ""			// Add trans
					str+=$("#pTOC").val() ? ("|toc="+$("#pTOC").val()) : ""					// Add TOC
					if ($("#macroItemsList li").length) {
						str+="|trigger=";													// Head
						$("#macroItemsList li").each(function() {							// For each trigger
							v=$(this).text().split("→");									// Spit apart
							str+=TimecodeToSeconds(v[0].trim())+"-";						// Time, in seconds
							str+=v[1].trim()+"+";											// Id
							});				
						str=str.substr(0,str.length-1);										// Remove last +		
						}
					}
				str+=$("#param-1").val() ? ","+$("#param-1").val() : "";					// Add height
				str+=$("#param-2").val() ? ","+$("#param-2").val() : "";					// Add width
				str+=$("#param-3").prop("checked") ? ",1" : "";								// Add border
				str+=")";																	// Close 
				if (tag)	body=body.replace(/scale.....\(.*?\)/i,str);					// Get tag and replace it with new macro
				else		body+=str;														// Simply append
				}
			CKEDITOR.instances.editor1.setData(body);										// Add body data
			$("#macroEditorDiv").remove();													// Remove popup
			$("#playEditorDiv").remove();													// Kill old one
			Sound("ding");																	// Ding sound
			});

		function Populate()	{																// ADD ITEMS
			var i,j,s;
			$("#macroItemsList").empty();													// Clear list
			for (i=0;i<items.length;++i)   													// For each item
				for (j=0;j<app.doc.asks.length;++j)											// For each ask
					if (items[i] == app.doc.asks[j].id) {									// A match
						s="<li id='item-"+i+"'>"+items[i]+" - "+app.doc.asks[j].name;		// Add line
						$("#macroItemsList").append(s+"</li>"); 							// Add to list
						break;																// Quit looking
						}
			}	
	}																						// MACRO CLOSURE																					

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AMS EDITOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	AMSEditor(skin)																		// AMS EDITOR
	{
		var i,j;
		var str="<div id='amsEditorDiv' class='wm-stepEditor'>";
			str+="<img src='img/scaleLogo.png' style='vertical-align:-4px;margin-right:20px' width='32'><span style='font-size:30px'><b>Active Media Editor</b></span><br><p><hr></p>";	
			str+="<div id='amsItemsDiv' style='overflow-x:hidden;width:100%;height:120px;white-space:nowrap;'>";
		var o=skin.items;																	// Point at items
		for (i=0;i<o.length;++i) 															// For each item in skin
			str+="<div id='item-"+i+"' style='cursor:pointer;padding:2px 0'></div>"			// Add item line div
		str+="<p id='addAMSItemBut' class='wm-bs'>Add new item</p>";						// Add item button				
		str+="</div><hr><div id='amsParamDiv' style='width:100%'>Choose item above to edit</div>";// End itemsDiv, add params div	
		str+="</div><div style='margin-left:48px;margin-top:-15px'>";						// End editorDiv  Add buttons div																	
		str+="<div id='saveAMSBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;";			// Save button				
		str+="<img id='removeAMSBut' title='Delete this item' style='vertical-align:-5px' src='img/trashbut.gif'>";	// Trash button
		str+="&nbsp;&nbsp;&nbsp;Title: <input class='wm-is' type='text' style='width:60px;height:15px;text-align:center' id='skinName' value='"+skin.name+"'>";
		str+="&nbsp;&nbsp;&nbsp;Id: <input class='wm-is' type='text' style='width:60px;height:15px;text-align:center' id='skinId' value='"+skin.id+"'></div>";
		$("#contentDiv").html(str);	
		RefreshSkinItems();																	// Populate items

		$("#saveAMSBut").on("click", ()=> { 												// ON SAVE SKIN
			var s="";
			app.Do();																		// Save for undo
			var o=skin.items;																// Point at items
			for (i=0;i<o.length;++i) {														// For each item in skin
				s+=o[i].type+"~%#";															// Add op and special chars
				for (var key in o[i]) 														// For each param
					if ((key != "type") && (key != "right")) s+=","+key+"="+o[i][key];		// If not a type or right,add param
				s+=")  ";																	// End command
				}
			if (s)	s=s.replace(/~%#,/g,"(");												// Remove leading comma
			skin.body=s;																	// Set new body
			RefreshSkinItems();																// Refresh item list
			Sound("ding");																	// Ding sound
			});

		$("#skinId").on("change", ()=> { 													// ON SKIN ID
			app.Do();																		// Save for undo
			skin.id=$("#skinId").val();														// Set it
			$('#amsBut').find(":selected").html("<option value='"+skin.id+"'>"+skin.id+" - "+skin.name+"</option>");	// Change pulldown
			Sound("click");																	// Click sound
			});

		$("#skinName").on("change", ()=> { 													// ON SKIN NAME
			app.Do();																		// Save for undo
			skin.name=$("#skinName").val();													// Set it
			$('#amsBut').find(":selected").html("<option value='"+skin.id+"'>"+skin.id+" - "+skin.name+"</option>");	// Change pulldown
			Sound("click");																	// Click sound
			});

		$("#addAMSItemBut").on("click", ()=> { 												// ON ADD ITEM
			app.Do();																		// Save for undo
			skin.items.push({ right:0, type:"" });											// Add blank
			this.AMSEditor(skin);															// Redraw
			Sound("ding");																	// Ding sound
			});

		$("#removeAMSBut").on("click", ()=> { 												// ON REMOVE AMS
			ConfirmBox("Are you sure?","This will remove this skin from your course.", ()=> {	// If sure
				app.Do();																	// Save for undo
				app.ams.skins.splice($('#amsBut')[0].selectedIndex-1,1);					// Remove from ams
				$('#amsBut').find(":selected").remove();									// Remove from pulldown			
				$("#amsBut")[0].selectedIndex=0;											// Clear selection
				this.Draw("splash");														// Show splash																								
				Sound("delete");															// Delete sound
				});
			});

		function RefreshSkinItems()	{														// REFRESH SKIN ITEMS																		
			var i,str;
			var o=skin.items;																// Point at items
			for (i=0;i<o.length;++i) {														// For each item in skin
				str=(i+1)+". <b>"+o[i].type+"</b> "; 										// Add type
				for (var key in o[i]) {														// For each param
					if ((key != "type") && (key != "right"))								// If not a type or right
						str+=key+"="+o[i][key]+" ";											// Add param
					}
				$("#item-"+i).html(str);
				}
			}

		$("[id^=item-]").on("click", (e)=> {												// On item click
			var id=e.currentTarget.id.substr(5);											// Get id
			var o=skin.items[id];															// Point at item
			$("[id^=item-]").css("background-color","#fff");								// Clear highlights
			$("#item-"+id).css("background-color","#dee7f1");								// Highlight this one
			var s="<table><tr><td>Type&nbsp;&nbsp;</td><td>"+MakeSelect("amsType",false,["","banner","button","click","code","drag","group","macro","pic","text","type"],o.type);	
			s+="<img id='removeAMSItemBut' title='Delete this item' style='vertical-align:-5px;float:right' src='img/trashbut.gif'></td></tr>";	// Trash button

			if (o.type == "banner") {
				s+="<tr><td>Text</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsText' value='"+(o.text ? o.text :'')+"'></td></tr>";	
				s+="<tr><td>Sound&nbsp;&nbsp;</td><td><input class='wm-is' style='width:200px;height:16px' type='text' id='amsSound' value='"+(o.sound ? o.sound :'')+"'></td></tr>";	
				}
			else if (o.type == "button") {
				s+="<tr><td>Left</td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsX' value='"+(o.x ? o.x :'')+"'>";	
				s+="&nbsp;&nbsp;Top:&nbsp; <input class='wm-is' style='width:30px;height:16px' type='text' id='amsY' value='"+(o.y ? o.y :'')+"'></td></tr>";
				s+="<tr><td>Label</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsLabel' value='"+(o.label ? o.label :'')+"'></td></tr>";	
				s+="<tr><td>CSS</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStyle' value='"+(o.style ? o.style :'')+"'></td></tr>";	
				s+="<tr><td>Start&nbsp;&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStart' value='"+(o.start ? o.start :'')+"'></td></tr>";	
				s+="<tr><td>Yes&nbsp;&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsYes' value='"+(o.yes ? o.yes :'')+"'></td></tr>";	
				}
			else if ((o.type == "click") || (o.type == "hover")) {
				s+="<tr><td>Left&nbsp;target&nbsp;&nbsp;</td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsX' value='"+(o.x ? o.x :'')+"'>";	
				s+="&nbsp;&nbsp;Top target: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsY' value='"+(o.y ? o.y :'')+"'>";
				s+="&nbsp;&nbsp;Proximity: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsAcc' value='"+(o.d ? o.d :'')+"'></td></tr>";
				s+="<tr><td>Start&nbsp;&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStart' value='"+(o.start ? o.start :'')+"'></td></tr>";	
				s+="<tr><td>Yes action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsYes' value='"+(o.yes ? o.yes :'')+"'></td></tr>";	
				s+="<tr><td>No action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsNo' value='"+(o.no ? o.no :'')+"'></td></tr>";	
				}
			else if (o.type == "code") {
				s+="<tr><td>Text</td><td><textarea style='width:400px;width:300px;height:100px' id='amsText'>"+(o.code ? o.code :'')+"</textarea></td></tr>";	
				}
			else if (o.type == "drag") {
				s+="<tr><td>Start&nbsp;left</td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsX' value='"+(o.x ? o.x :'')+"'>";	
				s+="&nbsp;&nbsp;Start&nbsp;top: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsY' value='"+(o.y ? o.y :'')+"'>";
				s+="&nbsp;&nbsp;Image&nbsp;width: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsW' value='"+(o.w ? o.w :'')+"'></td></tr>";
				s+="<tr><td>Image</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsPic' value='"+(o.pic ? o.pic :'')+"'></td></tr>";	
				s+="<tr><td>Left&nbsp;target&nbsp;</td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsX2' value='"+(o.x2 ? o.x2 :'')+"'>";	
				s+="&nbsp;&nbsp;Top target: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsY2' value='"+(o.y2 ? o.y2 :'')+"'>";
				s+="&nbsp;&nbsp;Proximity: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsAcc' value='"+(o.d ? o.d :'')+"'></td></tr>";
				s+="<tr><td>Start&nbsp;&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStart' value='"+(o.start ? o.start :'')+"'></td></tr>";	
				s+="<tr><td>Yes action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsYes' value='"+(o.yes ? o.yes :'')+"'></td></tr>";	
				s+="<tr><td>No action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsNo' value='"+(o.no ? o.no :'')+"'></td></tr>";	
				}
			else if (o.type == "group") {
				s+="<tr><td>Members </td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsMem' value='"+(o.members ? o.members :'')+"'></td></tr>";	
				s+="<tr><td>Yes action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsYes' value='"+(o.yes ? o.yes :'')+"'></td></tr>";	
				s+="<tr><td>No action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsNo' value='"+(o.no ? o.no :'')+"'></td></tr>";	
				}
			else if (o.type == "macro") {
				s+="<tr><td>Id </td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsId' value='"+(o.id ? o.id :'')+"'></td></tr>";	
				s+="<tr><td>Text</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsText' value='"+(o.text ? o.text :'')+"'></td></tr>";	
				}
			else if (o.type == "pic") {
				s+="<tr><td>Left </td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsX' value='"+(o.x ? o.x :'')+"'>";	
				s+="&nbsp;&nbsp;Top: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsY' value='"+(o.y ? o.y :'')+"'>";
				s+="&nbsp;&nbsp;Width: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsW' value='"+(o.w ? o.w :'')+"'></td></tr>";
				s+="<tr><td>Opacity </td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsAlpha' value='"+(o.alpha ? o.alpha :'')+"'>";	
				s+="&nbsp;&nbsp;Effect: "+MakeSelect("amsMotion",false,["","Fade In", "Center zoom", "Top zoom", "Bottom zoom"],o.motion)+"</td></tr>";
				s+="<tr><td>Image </td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsPic' value='"+(o.pic ? o.pic :'')+"'></td></tr>";	
				s+="<tr><td>Start&nbsp;&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStart' value='"+(o.start ? o.start :'')+"'></td></tr>";	
				s+="<tr><td>Yes&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsYes' value='"+(o.yes ? o.yes :'')+"'></td></tr>";	
				}
			else if (o.type == "text") {
				s+="<tr><td>Left</td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsX' value='"+(o.x ? o.x :'')+"'>";	
				s+="&nbsp;&nbsp;Top: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsY' value='"+(o.y ? o.y :'')+"'>";
				s+="<tr><td>Text&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsText' value='"+(o.value ? o.value :'')+"'></td></tr>";	
				s+="<tr><td>CSS</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStyle' value='"+(o.style ? o.style :'')+"'></td></tr>";	
				s+="<tr><td>Start&nbsp;&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStart' value='"+(o.start ? o.start :'')+"'></td></tr>";	
				s+="<tr><td>Yes action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsYes' value='"+(o.yes ? o.yes :'')+"'></td></tr>";	
				}
			else if (o.type == "type") {
				s+="<tr><td>Left</td><td><input class='wm-is' style='width:30px;height:16px' type='text' id='amsX' value='"+(o.x ? o.x :'')+"'>";	
				s+="&nbsp;&nbsp;Top: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsY' value='"+(o.y ? o.y :'')+"'>";
				s+="&nbsp;&nbsp;Width: <input class='wm-is' style='width:30px;height:16px' type='text' id='amsW' value='"+(o.w ? o.w :'')+"'></td></tr>";
				s+="<tr><td>Target value&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsValue' value='"+(o.value ? o.value :'')+"'></td></tr>";	
				s+="<tr><td>Placeholder</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsPlace' value='"+(o.place ? o.place :'')+"'></td></tr>";	
				s+="<tr><td>CSS</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStyle' value='"+(o.style ? o.style :'')+"'></td></tr>";	
				s+="<tr><td>Start&nbsp;&nbsp;action&nbsp;&nbsp;</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsStart' value='"+(o.start ? o.start :'')+"'></td></tr>";	
				s+="<tr><td>Yes action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsYes' value='"+(o.yes ? o.yes :'')+"'></td></tr>";	
				s+="<tr><td>No action</td><td><input class='wm-is' style='width:400px;height:16px' type='text' id='amsNo' value='"+(o.no ? o.no :'')+"'></td></tr>";	
				}
			$("#amsParamDiv").html(s+"</table");
			
			var ids=["ams:","banner:","clear:","goto:","if:","play:","report:","seek:","sound:","var:"];
			$("#amsStart").autocomplete({ source: ids, minLength: 0});						// Auto complete Start
			$("#amsYes").autocomplete({ source: ids, minLength: 0});						// Auto complete Yes
			$("#amsNo").autocomplete({ source: ids, minLength: 0});							// Auto complete No
			$("#amsSound").autocomplete({ source: ["click","delete","ding"], minLength: 0}); // Auto complete Sound

			$("#amsX").on("change", function()		{ o.x=$(this).val(); });				// Set x on change
			$("#amsY").on("change", function() 		{ o.y=$(this).val(); });				// Set y on change
			$("#amsW").on("change", function() 		{ o.w=$(this).val(); });				// Set w on change
			$("#amsAcc").on("change", function() 	{ o.d=$(this).val(); });				// Set d on change
			$("#amsLabel").on("change", function() 	{ o.label=$(this).val(); });			// Set label on change
			$("#amsStyle").on("change", function() 	{ o.style=$(this).val(); });			// Set style on change
			$("#amsStart").on("change", function() 	{ o.start=$(this).val(); });			// Set start on change
			$("#amsYes").on("change", function() 	{ o.yes=$(this).val(); });				// Set yes on change
			$("#amsNo").on("change", function() 	{ o.no=$(this).val(); });				// Set no on change
			$("#amsSound").on("change", function() 	{ o.sound=$(this).val(); });			// Set sound on change
			$("#amsValue").on("change", function() 	{ o.value=$(this).val(); });			// Set value on change
			$("#amsPlace").on("change", function() 	{ o.place=$(this).val(); });			// Set place on change
			$("#amsPic").on("change", function() 	{ o.pic=$(this).val(); });				// Set pic on change
			$("#amsMem").on("change", function() 	{ o.members=$(this).val(); });			// Set members on change
			$("#amsId").on("change", function() 	{ o.id=$(this).val(); });				// Set id on change
			$("#amsX2").on("change", function()		{ o.x2=$(this).val(); });				// Set x2 on change
			$("#amsY2").on("change", function() 	{ o.y2=$(this).val(); });				// Set y2 on change
			$("#amsAlpha").on("change", function() 	{ o.alpha=$(this).val(); });			// Seta lpha on change
			$("#amsMotion").on("change", function() { o.motion=$(this).val(); });			// Seta lpha on change
		
			$("#amsText").on("change", function() 	{ 										// Set text on change
				o.text=$(this).val(); 														// Get val
				if (o.text) {																// If something there																	
					o.text=o.text.replace(/'/g,"&apos;");									// Apos entity
					o.text=o.text.replace(/,/g,"&comma;");									// Comma entity
					}
				});	
	
			$("#amsType").on("change", ()=> 	{ 											// Set type on change
				o.type=$("#amsType").val(); 												// Get val
				Sound("click");																// Click sound
				this.AMSEditor(skin);														// Redraw
				});
	
			$("#removeAMSItemBut").on("click", ()=> {										// ON REMOVE ITEM	
				skin.items.splice(id,1);													// Remove it
				Sound("delete");															// Delete sound
				this.AMSEditor(skin);														// Redraw
				});
			
			});
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RULES EDITOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	RuleEditor(r)																		// RULE EDITOR
	{
		var i,ids=[];
		var str="<div class='wm-stepEditor'>";
		str+="<table>";
		str+="<tr><td><img src='img/scaleLogo.png' style='vertical-align:-20px' width='32'></td><td><span style='font-size:30px'><b>Rule Editor</b></span><br><b</td></tr>";	
		str+="<tr><td colspan='2'><br></td></tr>";	
		str+="<tr><td><b>IF</b></td><td><input class='wm-is' type='text' id='ruleSub' value='"+(r.subject ? r.subject :'')+"'></td></tr>";	
		str+="<tr><td><b>IS</b></td><td>"+MakeSelect("ruleVerb",false,["Equal","Not equal","Similar","Less than","Less than or equal","Greater than","Greater than or equal","RegEx"],r.verb,"",["EQ","NE","LK","LT","LE","GT","GE","RE"])+"</td></tr>";	
		str+="<tr><td><b>TO</b></td><td><input class='wm-is' type='text' id='ruleTrig' value='"+(r.trigger ? r.trigger :'')+"'></td></tr>";	
		str+="<tr><td><b>THEN&nbsp;</b></td><td>"+MakeSelect("ruleDo",false,["Show pane","Goto pane","Set status","Report","Set var"],r.do,"",["SHOW","GOTO","STATUS","REPORT","VAR"])+"</td></tr>";	
		str+="<tr><td><b>OF</b></td><td><input class='wm-is' type='text' id='ruleObj' value='"+(r.object ? r.object :'')+"'></td></tr>";	
		str+="<tr><td colspan='2'><br></td></tr>";	
		str+="<tr><td><b>Name</b></td><td><input class='wm-is' type='text' id='ruleName' value='"+(r.name ? r.name :'')+"'></td></tr>";	
		str+="<tr><td><b>Id</b></td><td><input class='wm-is' type='text' id='ruleId' value='"+(r.id ? r.id :'')+"'></td></tr>";	
		str+="</table>";																			
		str+="</div><div style='margin-left:48px;margin-top:-15px'>";																		
		str+="<div id='saveRuleBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;";						
		str+="<img id='removeRuleBut' title='Delete this rule' style='vertical-align:-5px' src='img/trashbut.gif'></div>";	// Trash button
		$("#contentDiv").html(str);	
		i=app.doc.FindLobIndexById(r.subject.split(":")[0]);								// ADD NAMES AND AUTOCOMPLETE - index to subject
		if (i != -1)																		// If a valid mob
			$("#ruleSub").val(r.subject+" - "+ShortenString(app.doc.lobs[i].name,30));		// Add name
		i=app.doc.FindLobIndexById(r.object.split(":")[0]);									// Index to object
		if (i != -1)																		// If a valid mob
			$("#ruleObj").val(r.object+" - "+ShortenString(app.doc.lobs[i].name,30));		// Add name
		for (i=0;i<app.doc.lobs.length;++i)													// For each lob
			ids.push(app.doc.lobs[i].id+" - "+ShortenString(app.doc.lobs[i].name,30));		// Add label
		$("#ruleSub").autocomplete({ source: ids, minLength: 0});							// Auto complete source
		$("#ruleObj").autocomplete({ source: ids, minLength: 0});							// Auto complete object

		$("#saveRuleBut").on("click", ()=> { 												// ON SAVE RULE
			var o={};
			app.Do();																		// Save for undo
			o.subject=$("#ruleSub").val().split(" - ")[0];									// Save just ID
			o.object=$("#ruleObj").val().split(" - ")[0];									// Save just ID
			o.id=$("#ruleId").val();	o.name=$("#ruleName").val();						// Get vals						
			o.verb=$("#ruleVerb").val();	o.trigger=$("#ruleTrig").val();					
			o.do=$("#ruleDo").val();			

			$('#rulesBut').find(":selected").text(o.id+" - "+o.name);						// Rename pulldown			
			app.rul.rules[$("#rulesBut")[0].selectedIndex-1]=o;								// Set new rule
			$("#rulesBut")[0].selectedIndex=0;												// Clear selection
			this.Draw("splash");															// Show splash																								
			Sound("ding");																	// Ding sound
			});
		
		$("#removeRuleBut").on("click", ()=> { 												// ON REMOVE RULE
			ConfirmBox("Are you sure?","This will remove this rule from your course.", ()=> {	// If sure
				app.Do();																	// Save for undo
				app.rul.rules.splice($('#rulesBut')[0].selectedIndex-1,1);					// Remove from rules
				$('#rulesBut').find(":selected").remove();									// Remove from pulldown			
				$("#rulesBut")[0].selectedIndex=0;											// Clear selection
				this.Draw("splash");														// Show splash																								
				Sound("delete");															// Delete sound
				});
			});
	}
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SETTINGS EDITOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	SettingsEditor()																	// SETTINGS EDITOR
	{
		var str="<div class='wm-stepEditor'>";
		str+="<img src='img/scaleLogo.png' style='vertical-align:-6px' width='32'><span style='font-size:30px;margin-left:16px'><b>Settings</b></span><br><br>";	
		str+="<table>";
		str+="<tr><td>Mark done if visited</td><td><input type='checkbox' "+(app.setDone ? "checked" : "")+" id='setDone'></td></tr>";	
		str+="<tr><td>Skip if visited</td><td><input  type='checkbox' "+(app.skipDone ? "checked" : "")+" id='setSkip'></td></tr>";	
		str+="<tr><td>Hide header?</td><td><input type='checkbox' "+(app.hideHeader ? "checked" : "")+" id='setHeader'>&nbsp;&nbsp;&nbsp;";	
		str+="Start&nbsp;fullscreen?&nbsp;<input type='checkbox' "+(app.fullScreen ? "checked" : "")+" id='setFull'></td></tr>";	
		str+="<tr><td>Default margin %</td><td><input class='wm-is' type='text' id='setMargin' value='"+(app.defMargin ? app.defMargin : 0)+"'></td></tr>";	
		str+="<tr><td>Discussion name|id</td><td><input class='wm-is' type='text' id='setDiscuss' value='"+(app.discussion ? app.discussion : '')+"'></td></tr>";	
		str+="<tr><td colspan='2'><hr></td></tr>";	
		str+="<tr><td>Assessment&nbsp;passlevel&nbsp;</td><td><input class='wm-is' type='text' id='setPass' value='"+(app.assessLevel ? app.assessLevel : '')+"'></td></tr>";	
		str+="<tr><td>User name prefix</td><td><input class='wm-is' type='text' id='setName' value='"+(app.namePrefix ? app.namePrefix : '')+"'></td></tr>";	
		str+="<tr><td>Ask to login</td><td><input type='checkbox' "+(app.login ? "checked" : "")+" id='setLogin'></td></tr>";	
		str+="<tr><td>Reporting level</td><td><input class='wm-is' type='text' id='setLevel' value='"+(app.reportLevel ? app.reportLevel : '')+"'></td></tr>";	
		str+="<tr><td>Reporting link</td><td><input class='wm-is' type='text' id='setLink' value='"+(app.reportLink ? app.reportLink : '')+"'></td></tr>";	
		str+="<tr><td colspan='2'><hr></td></tr>";	
		str+="<tr><td>Deployment link</td><td style='font-size:11px'>www.viseyes.org/scale?"+app.doc.courseId+"</td></tr>";	
		str+="<tr><td colspan='2'><hr></td></tr>";	
		str+="<tr><td>Delete entire course</td><td><div id='deleteCourseBut' class='wm-bs'>Delete</div></td></tr>";	
		str+="</table>";																			
		str+="</div><div style='margin-left:48px;margin-top:-15px'>";																		
		str+="<div id='saveSetBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;";						
		$("#contentDiv").html(str);	

		$("#deleteCourseBut").on("click", ()=> { 											// ON DELETE COURSE		
			ConfirmBox("Are you sure?","This will remove the entire course!", ()=> {		// If sure
				let t=app.doc.courseId;														// Save current id
				app.InitCourse(null);														// Init	
				app.doc.courseId=t;															// Restore old id
				app.doc.AddNewLob("", 1, "Course name");									// Add course				
				app.Draw();
			});
		});

		$("#saveSetBut").on("click", ()=> { 												// ON SAVE SETTINGS
			app.Do();																		// Save for undo
			app.setDone=$("#setDone").prop("checked");										// Get vals			
			app.skipDone=$("#setSkip").prop("checked");								
			app.reportLevel=$("#setLevel").val();	
			app.login=$("#setLogin").prop("checked");								
			app.namePrefix=$("#setName").val();	
			app.reportLink=$("#setLink").val();	
			app.hideHeader=$("#setHeader").prop("checked");								
			app.fullScreen=$("#setFull").prop("checked");								
			app.defMargin=$("#setMargin").val();	
			app.discussion=$("#setDiscuss").val();	
			this.Draw("splash");															// Show splash																								
			Sound("ding");																	// Ding sound
			});
		}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// QUESTION EDITOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	QuestionEditor(ask) 																	// ASK STEP EDITOR
	{
		var i;
		var o=$.parseJSON(ask.step);													// Convert to obj
		var _this=this;																	// Save context		
		var str="<div class='wm-stepEditor'><table style='font-size:12px'>";
		str+="<tr><td><img src='img/scaleLogo.png' width='32'></td><td><span style='font-size:30px'><b>Question Editor</b></span><br><br><b</td></tr>";	
		str+="<tr><td><b>Question&nbsp;name</b></td><td><input class='wm-is' type='text' id='askName' value='"+(ask.name ? ask.name :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Type</b></td><td>"+MakeSelect("optionType",false,["radio","checkbox","cloze","slider","write","match","sort"],o.optionType,"width:100px")
		str+="&nbsp;&nbsp;<b>Code</b>&nbsp;&nbsp;<input class='wm-is' type='text' style='width:150px' id='askCode' value='"+(o.code ? o.code :'')+"'></td></tr>";
		str+="<tr><td><b>Title</b></td><td><input class='wm-is' type='text' id='title' value='"+(o.title ? o.title :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Text</b></td><td><textarea class='wm-is' id='text'>"+(o.text ? o.text :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>Prompt</b></td><td><textarea class='wm-is' id='prompt'>"+(o.prompt ? o.prompt :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>Image</b></td><td><input class='wm-is' type='text' id='pic' value='"+(o.pic ? o.pic :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>If right answer</b></td><td><textarea class='wm-is' id='whyRight'>"+(o.whyRight ? o.whyRight :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>If wrong answer</b></td><td><textarea class='wm-is' id='whyWrong'>"+(o.whyWrong ? o.whyWrong :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>If partial answer</b>&nbsp;</td><td><textarea class='wm-is' id='whyPartial'>"+(o.whyPartial ? o.whyPartial :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>Number of tries</b></td><td><input class='wm-is' type='text' id='numTries' value='"+(o.numTries ? o.numTries :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Allow skipping</b></td><td>"+MakeSelect("skip",false,["true","false"],o.skip)+"</td></tr>";	// Get setting
		str+="<tr><td><b>Font size</b></td><td><input class='wm-is' type='text' id='fontSize' value='"+(o.fontSize ? o.fontSize :'Default (12)')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Id</b></td><td><input class='wm-is' type='text' id='askId' value='"+(ask.id ? ask.id :'')+"'></td></tr>";	// Get setting
		str+="<tr><td colspan=2><p><hr></p></td></tr>";
		str+="<tr><td><b>Options</b></td><td><dl id='optionsTable'>";
		if (o.options) {
			str+="";
			for (i=0;i<o.options.length;++i) {
				str+="<dt id='ido"+i+"'style='height:28px'><input class='wm-is' type='text' id='idr"+i+"' value='"+(o.options[i] ? o.options[i] :'')+"'>"; 	// Add option
				str+="&nbsp;&nbsp;&nbsp;&nbsp;&uarr;&darr;&nbsp";																			// Add arrows
				str+="&nbsp;&nbsp;&nbsp;<img id='idd"+i+"' style='vertical-align:middle;cursor:pointer' src='img/trashbut.gif'</dt>"
				}
			}		
		str+="</dl></td></tr></table>";																			
		str+="<div style='text-align:center'><div id='addNewOptionBut' class='wm-bs'>Add new option</div></div>";	
		str+="</div><div style='margin-left:48px;margin-top:-15px'>";																		
		str+="<div id='saveStepBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;";						
		str+="<img id='removeStepBut' title='Delete this question' style='vertical-align:-5px' src='img/trashbut.gif'></div>";	// Trash button
		$("#contentDiv").html(str);	
		$("#optionsTable").sortable();
	
		$("#optionsTable").on("sortstop", function(e, ui) {									// If sorted
			var v=$("#optionsTable").sortable("toArray");									// Get new order
			for (i=0;i<v.length-1;++i)														// For each option, less add but
 				o.options[i]=$("#idr"+v[i].substr(3)).val();								// Reorder array
			});
		
		 if (o.options)																		// If options set
			for (i=0;i<o.options.length;++i) {												// For each option
				 $("#idd"+i).on("click", function() { 										// Extract value	
					var id=$(this)[0].id.substr(3);											// Extract id
					o.options.splice(id,1);													// Remove from list
					$("#ido"+id).remove();													// Remove option from menu
					Sound("delete");														// Delete sound
					});
				}
	
		$("#addNewOptionBut").on("click", function() { 										// ON ADD NEW OPTION	
			if (!o.options)	o.options=[];													// First one, so alloc array
			o.options.push("");																// Add new option
			var i=o.options.length-1;														// Index	
			var str="<dt id='ido"+i+"'style='height:28px'><input class='wm-is' type='text' id='idr"+i+"' value=''>"; 	
			str+="&nbsp;&nbsp;&nbsp;&nbsp;&uarr;&darr;&nbsp";														
			str+="&nbsp;&nbsp;&nbsp;<img id='idd"+i+"' style='vertical-align:middle;cursor:pointer' src='img/trashbut.gif'</dt>";
			$("#optionsTable").append(str);													// Add line to table
			Sound("click");																	// Delete sound
			
			$("#idd"+i).on("click", function() { 											// ADD TRASH HANDLER	
					var id=$(this)[0].id.substr(3);											// Extract id
					o.options.splice(id,1);													// Remove from step
					$("#ido"+id).remove();													// Remove option from menu
					Sound("delete");														// Delete sound
					});
			});

		$("#saveStepBut").on("click", function() { 											// ON SAVE STEP
				var i;
				app.Do();																	// Save for undo
				o.optionType=$("#optionType").val();	o.title=$("#title").val();			// Get values from inputs						
				o.text=$("#text").val();				o.prompt=$("#prompt").val();									
				o.pic=$("#pic").val();					o.whyRight=$("#whyRight").val();								
				o.whyWrong=$("#whyWrong").val();		o.whyPartial=$("#whyPartial").val();	
				o.fontSize=$("#fontSize").val();		o.numTries=$("#numTries").val();	
				o.skip=$("#skip").val();				o.code=$("#askCode").val();		
				ask.name=$("#askName").val();			ask.id=$("#askId").val();				
				var v=$("#optionsTable").sortable("toArray");								// Get new order
				for (i=0;i<v.length;++i) {													// For each option		
					v[i]="idr"+v[i].substr(3);												// Replace sort id with input id
					o.options[i]=$("#"+v[i]).val();											// Get option value
					}
				ask.step=JSON.stringify(o);													// Copy at JSON string
				$('#asksBut').find(":selected").text(ask.id+" - "+ask.name);				// Rename pulldown			
				$("#asksBut")[0].selectedIndex=0;											// Clear selection
				_this.Draw("splash");														// Show splash																								
				Sound("ding");																// Ding sound
				});
		
		$("#removeStepBut").on("click", function() { 										// ON REMOVE STEP
				ConfirmBox("Are you sure?","This will remove this question from your course.", ()=> {	// If sure
				app.Do();																	// Save for undo
				app.doc.asks.splice($('#asksBut')[0].selectedIndex-1,1);					// Remove from rules
				$('#asksBut').find(":selected").remove();									// Remove from pulldown			
				$("#asksBut")[0].selectedIndex=0;											// Clear selection
				_this.Draw("splash");														// Show splash																								
				Sound("delete");															// Delete sound
				});
			});
		}																					// EditStep() closure
	}																						// Class closure

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TREE  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	class Tree {

		constructor()  																	// CONSTRUCTOR
		{
			this.Init();																	// Init tree
		}

		Init(id) 																			// INIT TREE
		{
			var i,oo;
			var _this=this;																	// Save context		
			var o=app.doc.lobs[0];															// Point at root												
			if (!o)	return;																	// If invalid, quit
			var str="<ul><li class='parent active'><a id='tr-"+o.id+"'>"+o.name+"</a></li>"; // Add root tree node
			$("#treeDiv").html(str+"</ul>");												// Add to tree div
			this.AddChildren($("#tr-"+o.id),0);												// Add children to tree
		
			var str="<ul><li class='parent'><a id='tr-float'>Floating Panes</a>"; 			// FLOATS - Add float root 
			for (i=1;i<app.doc.lobs.length;++i) {											// For each lob
				oo=app.doc.lobs[i];															// Point at  lob
				if (!app.doc.FindLobById(oo.parent))										// If no parent
					str+="<ul><li><a id='tr-"+oo.id+"'>"+oo.name+"</a></li></ul>";			// Add to tree
				}
			$("#treeDiv").append(str+"</li></ul>");											// Append floats to tree

			$("#tr-"+o.id).parent().children('ul').slideToggle('fast');            			// Open course
			$("[id^=tr-]").draggable( {	revert:true, delay:500 });							// Make lines draggable to change spotin tree
			$("[id^=tr-]").droppable( {														// Make lines droppable 
				drop: function(e,ui) {														// On drop
					var mode=e.shiftKey ? "move" : "shift";									// Move or shift
					app.Do();																// Save for undo
					app.doc.ChangeOrder(ui.draggable[0].id.substr(3),e.target.id.substr(3),mode); // Rearrange
					_this.Init(ui.draggable[0].id.substr(3));								// Re-init tree	
					Sound("ding");															// Ding
					}
			});

			if (id != undefined) this.Open(id);	

			$('.wm-tree li > a').on("click", function(e) {									// ON CLICK OF NODE TEXT
				_this.handleTreeClick($(this),e);  											// Handle
				Sound("click"); 															// Click
				});      
		}

		Open(id)																		// OPEN TREE AT ID
		{
			var i;
			var row=$("#tr-"+id);															// Row
			var par=row.parent();															// Point at previous line
			$('.wm-tree li a').each( function() {                          					// For each line
				$(this).css({"color":"#000","font-weight":"normal"});      					// Normal
				}); 
			row.css({"color":"#009900","font-weight":"bold"});          					// Bold and green   
			for (i=0;i<20;++i) {															// Iterate upwards
				if ($(par).attr("class") == "wm-tree")	break;								// Quit at top of tree
				if ($(par).attr("class") == "parent") {										// Has children
					par.addClass('active');                         						// Active class on 
					par.children('ul').slideToggle('fast');            						// Slide into place
					}
				par=par.parent();															// Up a level
				}
		}

	handleTreeClick(row, e)																// HANDLE TREE CLICK
	{
		if (e.offsetX < 12) {                                         				  		// In icon
			row.parent().toggleClass('active');                         					// Toggle active class on or off
			row.parent().children('ul').slideToggle('fast');            					// Slide into place
			}
		else{																				// In text
			$('.wm-tree li a').each( function() {                          					// For each line
				$(this).css({"color":"#000","font-weight":"normal"});      					// Normal
				}); 
			row.css({"color":"#009900","font-weight":"bold"});          					// Bold and green   
			this.curRow=row;																// Save row
			this.curPaneId=e.target.id.substr(3);											// Save pane id
			app.con.Draw("pane",this.curPaneId);											// Show pane
			}
		}

	AddChildren(row, id) 																// ADD CHILDREN TO TREE RECURSIVELY
	{
		var i,o,oo;
		if (id < 0)	return;																	// Invalid index
		var o=app.doc.lobs[id];																// Point at parent												
		if (!o)	return;																		// If invalid, quit
		if (!o.children)	return;															// Quit if no children
		var str="<ul style='display:none'>";												// Wrapper
		for (i=0;i<o.children.length;++i) {													// For each child
			str+="<li";																		// Start row
			oo=app.doc.lobs[o.kids[i]];														// Point at child lob via index
			if (oo.children.length)	str+=" class='parent'"									// Add parent if it has children
			str+="><a id='tr-"+oo.id+"'>"+oo.name;											// Add index and name
			str+"</a></li>";																// Add label
			}
		row.after(str+"</ul>");																// Add to tree
		for (i=0;i<o.children.length;++i) {													// For each child
			row=$("#tr-"+o.children[i])
			this.AddChildren(row,o.kids[i]);												// Recurse
			}
		}
}																						// Class closure

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GOOGLE DRIVE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var gdClientId="453812393680-8tb3isinl1bap0vqamv45cc5d9c7ohai.apps.googleusercontent.com";		// Google client id
var gdScope="https://www.googleapis.com/auth/drive";											// Scope of access
var gdKey="AIzaSyD0jrIlONfTgL-qkfnMTNdjizsNbLBBjTk";											// Google API key

function SaveSpreadsheet(id, data)															// CLEAR AND SAVE DATA TO GDRIVE
{
		gapi.load('client:auth2', function() {
			gapi.client.init({																	// Init
			apiKey: gdKey, clientId: gdClientId, scope:gdScope,									// Params
           	discoveryDocs:["https://sheets.googleapis.com/$discovery/rest?version=v4"],			// API discovery
        	}).then(function () {																// When initted, listen for sign-in state changes.
	        	gapi.auth2.getAuthInstance().isSignedIn.listen(doIt);							// Try						
        		doIt(gapi.auth2.getAuthInstance().isSignedIn.get());							// Try
	
				function doIt(isSignedIn) {														// Do action
					if (!isSignedIn) 															// If not signed in yet														
						gapi.auth2.getAuthInstance().signIn();									// Sign in
					else{																		// Clear and save
						var params= { spreadsheetId:id, range: "A1:ZZZ100000" };				// Where to save it
						var body= { majorDimension: "ROWS", values: data };						// Data to save
						var request=gapi.client.sheets.spreadsheets.values.clear(params);		// Clear first
						request.then(function(r) { 												// When cleared
							params.valueInputOption="RAW";										// Send raw data
							var request=gapi.client.sheets.spreadsheets.values.update(params,body);	// Send new data
							request.then(function(r) {											// Good save
								Sound("ding");													// Ding
								PopUp("Course copied<br>to Google Drive!");						// Show popup
								}, 
								function(e) { trace(e.result.error.message); })					// Error reporting for send
							}, 
						function(e) { trace(e.result.error.message); });						// Error reporting for clear
						}
				}			
			});
		});
}

function GetSpreadsheet(allFiles, callback)													// RUN GDRIVE PICKER
{
	var oauthToken,pickerApiLoaded=false;
	gapi.load('auth', { callback: function() {													// LOAD AUTH
		window.gapi.auth.authorize({															// Authorize
				apiKey: gdKey, client_id: gdClientId, scope:gdScope,immediate: false },			// Params
				function(authResult) {															// On auth return
					if (authResult && !authResult.error) {										// If OK
						oauthToken=authResult.access_token;										// Set token
						createPicker();															// Create picker
						}
				});																				// End auth.authorize()
			}																					// End callback()
		});																						// End auth()
		
	gapi.load('picker', {'callback': function() {												// LOAD PICKER							
			pickerApiLoaded=true;																// Set flag
			createPicker();																		// Create picker
			}
		});
	
	function createPicker() {																	// CREATE GDRIVE PICKER
		if (pickerApiLoaded && oauthToken) {													// If loaded and authed
			var view=new google.picker.DocsView(google.picker.ViewId.SPREADSHEETS).				// Make view
			setOwnedByMe(allFiles).setIncludeFolders(true);										// Params
			var picker=new google.picker.PickerBuilder().										// Make picker
				addView(view).setOAuthToken(oauthToken).										// Params
				setDeveloperKey(gdKey).setCallback(pickerCallback).build();						// Do it
			picker.setVisible(true);															// Show picker
			}
		}

	function pickerCallback(data) {																// FILE CHOSEN CALLBACK
		if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {				// If picked
			var doc=data[google.picker.Response.DOCUMENTS][0];									// Get doc
			callback(doc.id,doc.name);															// Return name and id
			}
		}
}																								// End closure

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ShortenString(str, len)													// SHORTEN A STRING TO LENGTH
	{
		if (str && str.length > len)														// Too long
			str=str.substr(0,(len-3)/2)+"..."+str.slice((len-3)/-2);						// Shorten	
		return str;																			// Return string
	}

	function ConfirmBox(title, content, callback, callback2)							// CONFIRMATION BOX
	{
		Sound("ding");																		// Ding sound
		$("#confirmBoxDiv").remove();														// Remove 
		$("body").append("<div class='wm-confirm' id='confirmBoxDiv'></div>");														
		var str="<img src='img/scaleLogo.png' width='32' style='vertical-align:-10px'/>&nbsp;&nbsp;";								
		str+="<span style='font-size:18px; color:#666'><b>"+title+"</b></span><br>";
		str+="<p>"+content+"<p>";
		str+="<div style='float:right'><div id='confirmOK' class='wm-bs'>OK</div>";
		str+="<div id='confirmCancel' class='wm-bs' style='margin-left:8px;background-color:#999'>Cancel</div></div>";
		$("#confirmBoxDiv").html(str);	
	
		$("#confirmOK").on("click", function() {											// ON OK BUT
				$("#confirmBoxDiv").remove();												// Remove 
				if (callback)	callback();													// If callback defined, run it
				});

		$("#confirmCancel").on("click", function() {										// ON CANCEL BUT
				$("#confirmBoxDiv").remove();												// Remove 
				if (callback2)	callback2();												// If callback defined, run it
				Sound("delete");															// Delete sound
				});
	}

	function MakeSelect(id, multi, items, sel, extra, values)				// CREATE HTML SELECT
	{
		var	str="<select class='wm-is' style='width:200px;"
		if (extra)																// If extra param
			str+=extra;															// Add them
		str+="' id='"+id+"'";													// Header
		if (multi)																// Multi select
			str+="multiple='multiple' size='"+multi+"'";						// Add flag
		str+=">";																// End header
		for (i=0;i<items.length;++i) {											// For each option
			str+="<option";														// Add tag
			if (values && values[i]) {											// If has a value
				str+=" value='"+values[i]+"'";									// Add it
				if (sel == values[i])	str+=" selected='selected'"				// If value selected, add tag
				}
			else if (sel == items[i])	str+=" selected='selected'"				// If name selected, add tag
			str+=">"+items[i]+"</option>";										// End option
			}	
		return str+"</select>";													// End select				
}

	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function CopyToClipboard(text) 											// COPY TEXT TO CLIP BOARD
	{
  		var textArea = document.createElement("textarea");
		textArea.style.position = 'fixed';
  		textArea.style.top=textArea.style.left = 0;
  		textArea.style.width=textArea.style.height = '2em';
  		textArea.style.padding = 0;
		textArea.style.border=textArea.style.outline=textArea.style.boxShadow = 'none';
		textArea.style.background = 'transparent';
		textArea.value = text;
		document.body.appendChild(textArea);
		textArea.select();
		try {
			if (document.execCommand('copy'))
				Sound("ding");
			else
				Sound("delete");
			} catch (err) {
				Sound("delete");
				}
		document.body.removeChild(textArea);
	}

	function Sound(sound, mute)												// PLAY SOUND
	{
		var snd=new Audio();													// Init audio object
		if (sound.match(/\.mp3/i))		snd=new Audio(sound)					// If an MP3 file
		else							snd=new Audio("img/"+sound+".mp3");		// Use built in mp3
		if (!mute)	{															// If not initing or muting	
			snd.volume=50/100;													// Set volume
			snd.play();															// Play it
			}
		}
	
	function PopUp(msg, time, div)											// TIMED POPUP
	{
		var str="";
		$("#popupDiv").remove();												// Kill old one, if any
		str+="<div id='popupDiv' class='wm-popup'>"; 							// Add div
		if (time == -1) {														// If has close but
			time=100000;														// Increase time
			str+="<img id='pu-close' src='img/closedot.gif' style='float:right;cursor:pointer'>";	// Add close button
			}
		str+=msg+"</div>"; 														// Add div
		$(div ? "#"+div : "body").append(str);									// Add popup to div or body
		$("#pu-close").click(function() { $("#popupDiv").remove(); });			// Remove on click of close but
		$("#popupDiv").fadeIn(500).delay(time ? time : 2000).fadeOut(500)		// Animate in and out		
	}

	function SendToIframe(msg) 												// SENT MESSAGE TO CURRENT CONTENT IFRAME
	{
		if (!$("#contentIF").length)		return;								// Quit if no iframe	
		$("#contentIF")[0].contentWindow.postMessage(msg,"*");	 				// Send message 
	}

	function TimecodeToSeconds(timecode) 									// CONVERT TIMECODE TO SECONDS
	{
		var h=0,m=0;
		var v=(""+timecode).split(":");											// Split by colons
		var s=v[0]																// Add them
	 	if (v.length == 2)														// Just minutes, seconds
			s=v[1],m=v[0];														// Add them
		else if (v.length == 3)													// Hours, minutes, seconds
			s=v[2],m=v[1],h=v[0];												// Add them
		return(Number(h*3600)+Number(m*60)+Number(s));							// Convert
	}
	
	function SecondsToTimecode(secs) 										// CONVERT SECONDS TO TIMECODE
	{
		var str="",n;
		n=Math.floor(secs/3600);												// Get hours
		if (n) str+=n+":";														// Add to tc
		n=Math.floor(secs/60);													// Get mins
		if (n < 10) str+="0";													// Add leading 0
		str+=n+":";																// Add to tc
		n=Math.floor(secs%60);													// Get secs
		if (n < 10) str+="0";													// Add leading 0
		str+=n;																	// Add to tc
		str+="."+Math.round((secs-Math.floor(secs))*10);						// Add fractional
		return str;																// Return timecode			
	}	

	function ConvertFromGoogleDrive(url)									// CONVERT GOOGLE DRIVE/DROPBOX LINK TO DIRECT LINK
	{
		if (url && url.match(/drive\.google/i)) {								// A google drive image
			var id=url.match(/\?id=(.+)/i);										// Extract id
			if (!id)															// Nothing there
				id=url.match(/\/d\/(.*?)\//);									// Try this way
			if (id)																// An id found
				url="//drive.google.com/uc?export=download&id="+id[1];			// Construct 'direct' link
			}
		else if (url && url.match(/dropbox\.com/i)) {							// A dropbox link
			var id=url.match(/\/s\/(.*)\?dl=0/i)[1];							// Extract id
			url="https://dl.dropboxusercontent.com/s/"+id;						// Construct direct link
			}
		return url;																// Return link
	}


</script>
<script src="custom.js"></script>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-1013215-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'UA-1013215-2');
</script>

</body></html>
